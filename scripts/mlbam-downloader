#!/usr/bin/env python

"""MLBAM data downloader
"""

import argparse
import calendar
import datetime
import os

from mlbam_utils import conf, download


class ParseDateAction(argparse.Action):
    """Parses a simple date from a string"""

    def __call__(self, parser, args, values, opt=None):
        try:
            value = (datetime.datetime
                     .strptime(values, '%Y-%m-%d')
                     .timetuple()[:3])
            setattr(args, self.dest, datetime.date(*value))
        except ValueError:
            parser.error('Given date must by in YYYY-MM-DD format.')


class ValidatePathAction(argparse.Action):
    """Validates a path"""

    def __call__(self, parser, args, values, opt=None):
        path = os.path.realpath(os.path.expanduser(values))
        if not os.path.isdir(path):
            parser.error('Given path must exist!')

        setattr(args, self.dest, path)


def generate_date_range(year, month=None):
    """Produces every date in a year,
    optionally limited to a certain month.
    """

    cal = calendar.Calendar()

    if month is not None:
        month_range = [month]
    else:
        month_range = range(conf.MONTH_BOUNDARIES[0],
                            conf.MONTH_BOUNDARIES[1] + 1)

    for month in month_range:
        for d in cal.itermonthdates(year, month):
            if not d.month == month:
                # filter out week-range dates given by "itermonthdates"
                continue

            yield d


if __name__ == '__main__':
    today = datetime.date.today()

    pars = argparse.ArgumentParser()
    pars.add_argument('-y', dest='year', type=int,
                      help='Scrape a specific year.')
    pars.add_argument('-m', dest='month', type=int,
                      help='Scrape a specific month and year. '
                           '-y must also be given.')
    pars.add_argument('-d', dest='date', action=ParseDateAction,
                      help='Scrape for specific date, in YYYY-MM-DD format.')
    pars.add_argument('-f', dest='files', action='append',
                      help='Specify which files to download. May be given multiple times. '
                           'Default: %s' % ', '.join(conf.DEFAULT_FILES))
    pars.add_argument('-o', dest='output', action=ValidatePathAction,
                      help='Output path.', required=True)
    pars.add_argument('-fl', dest='fail_loudly', action='store_true',
                      default=False,
                      help='When given, app will terminate on download errors.')
    pars.add_argument('-s', dest='skip', action='store_true', default=False,
                      help='Skip file if exists')
    opts = pars.parse_args()

    if opts.year and (opts.year < 1923 or opts.year > today.year):
        pars.error('-y must be between 1923 and %s' % today.year)

    # confirm a month and year are specificed
    if opts.month and not opts.year:
        pars.error('-m must be accompanied by a year, -y')

    # generate timespan
    if opts.year and not opts.month:
        date_gen = generate_date_range(opts.year)
    elif opts.month:
        date_gen = generate_date_range(opts.year, opts.month)
    else:
        date_gen = (opts.date, )

    # begin download
    download.download_data(date_seq=date_gen,
                           output=opts.output,
                           files=opts.files,
                           skip_if_exists=opts.skip,
                           fail_silently=not opts.fail_loudly)
